@using PersianDatePickerSample.Components.PersianDatePickerComponent
@inject IJSRuntime JS

<div class="Persian-date-picker" id="PersianPicker">
    <div class="input-wrapper">
        <input class="p-date"
               id="manualDateInput"
               value="@manualInput"
               @onfocus="() => manualInput = selectedDateInPersianFormat"
               @onclick="OpenPicker"
               autocomplete="off" />
        <a @onclick="Clear" class="clear">&#10006;</a>
    </div>

    @if (!string.IsNullOrEmpty(validationMessage))
    {
        <div style="validation">@validationMessage</div>
    }

    @if (openPicker)
    {
        <div class="Persian-date-wrapper">
            @if (monthMode)
            {
                <div class="month-select">
                    @foreach (var item in PersianDateHelper.GetMonths())
                    {
                        <a @onclick="() => GoToMonth(item.MonthNumber)">@item.MonthName</a>
                    }
                </div>
            }
            else if (yearMode)
            {
                <div class="year-select">
                    @for (int i = curYear; i >= 1380; i--)
                    {
                        var year = i;
                        <a @onclick="() => GoToYear(year)">@i</a>
                    }
                </div>
            }
            else
            {
                <div class="year">
                    <a @onclick="NextYear" class="navigation">&#8249;</a>
                    <span @onclick="YearMode">@currentYear</span>
                    <a @onclick="PrevYear" class="navigation">&#8250;</a>
                </div>

                <div class="month">
                    <a @onclick="NextMonth" class="navigation">&#8249;</a>
                    <span @onclick="MonthMode">@monthName</span>
                    <a @onclick="PrevMonth" class="navigation">&#8250;</a>
                </div>

                <div class="week">
                    @foreach (var name in PersianDateHelper.WeekNames)
                    {
                        <div class="day-name">
                            <span>@name</span>
                        </div>
                    }

                    @foreach (var item in cells)
                    {
                        var dayClass = item.Show ? "day" : "";

                        if (selectedDate.HasValue && item.Show && selectedDate.Value.Date == item.Date.Date)
                            dayClass += " current";

                        <div class="@dayClass">
                            @if (item.Show)
                            {
                                <a @onclick="() => SelectDate(item.Date)">@item.Day</a>
                            }
                        </div>
                    }
                </div>

                <!-- دکمه برو به امروز -->
                <div class="goto-today">
                    <a @onclick="GoToToday" class="today-button">برو به امروز</a>
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter] public DateTime? Value { get => Date; set { if (Date != value) { Date = value; DateChanged.InvokeAsync(value); } } }
    [Parameter] public EventCallback<DateTime?> ValueChanged { get; set; }
    [Parameter] public DateTime? Date { get; set; }
    [Parameter] public EventCallback<DateTime?> DateChanged { get; set; }

    DateTime? selectedDate;
    string selectedDateInPersianFormat = string.Empty;
    System.Globalization.PersianCalendar pc = new();
    string manualInput = string.Empty;
    string validationMessage = string.Empty;
    List<DateCellModel> cells = new();
    string monthName = string.Empty;
    int currentMonth, currentYear, currentDay, curYear;
    bool monthMode, yearMode, openPicker;
    DotNetObjectReference<PersianDatePicker>? objRef;

    protected override void OnInitialized()
    {
        curYear = pc.GetYear(DateTime.Now);
        if (Date.HasValue)
            SetPersianFormatText(Date.Value);
    }

    protected override void OnParametersSet()
    {
        if (Date != selectedDate)
        {
            selectedDate = Date;
            if (selectedDate.HasValue)
            {
                SetPersianFormatText(selectedDate.Value);
                PrepareCells(selectedDate.Value);
            }
        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("addOutsideClickListener", "PersianPicker", objRef);
            await JS.InvokeVoidAsync("clearInputAndApplyMask", "manualDateInput", objRef);
        }
    }

    [JSInvokable]
    public void UpdateCalendar(int year, int month, int day)
    {
        try
        {
            // بررسی تعداد روزهای معتبر در ماه
            int maxDays = GetDaysInMonth(year, month);
            if (day < 1 || day > maxDays)
            {
                validationMessage = $"روز باید بین 1 تا {maxDays} باشد.";
                return;
            }

            // تنظیم تاریخ معتبر
            selectedDate = new DateTime(year, month, day, pc);

            // بروزرسانی تقویم
            Date = selectedDate;
            DateChanged.InvokeAsync(selectedDate);
            PrepareCells(selectedDate.Value);
            SetPersianFormatText(selectedDate.Value);

            // بازنشانی پیام خطا و بستن پیکر
            validationMessage = string.Empty;
            openPicker = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            validationMessage = $"خطا در تنظیم تاریخ: {ex.Message}";
        }
    }

    [JSInvokable]
    public void ClosePicker()
    {
        openPicker = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        if (objRef != null)
        {
            objRef.Dispose();
        }
    }

    void Clear()
    {
        Date = selectedDate = null;
        selectedDateInPersianFormat = string.Empty;
        validationMessage = string.Empty;
        openPicker = false;
        DateChanged.InvokeAsync(null);
        JS.InvokeVoidAsync("clearInputAndApplyMask", "manualDateInput");
    }

    void OpenPicker()
    {
        if (openPicker)
        {
            openPicker = false;
            return;
        }

        selectedDate = Date ?? DateTime.Now;
        PrepareCells(selectedDate.Value);
        openPicker = true;
    }

    void SetPersianFormatText(DateTime date)
    {
        currentYear = pc.GetYear(date);
        currentMonth = pc.GetMonth(date);
        currentDay = pc.GetDayOfMonth(date);
        manualInput = selectedDateInPersianFormat = $"{currentYear}/{currentMonth:D2}/{currentDay:D2}";
    }

    void PrepareCells(DateTime date)
    {
        cells = new();
        currentYear = pc.GetYear(date);
        currentMonth = pc.GetMonth(date);
        currentDay = pc.GetDayOfMonth(date);
        var isLeapYear = pc.IsLeapYear(currentYear);

        monthName = $"{currentMonth.GetMonthName()}";
        selectedDateInPersianFormat = $"{currentYear}/{currentMonth.ToString("D2")}/{currentDay.ToString("D2")}";

        var firstDayOfDate = new DateTime(currentYear, currentMonth, 1, pc);
        int weekSpan = firstDayOfDate.DayOfWeek.GetWeekSpan();

        var maxDay = currentMonth <= 6 ? 31 : 30;
        if (!isLeapYear && currentMonth == 12 && maxDay == 30)
        {
            maxDay = 29;
        }

        for (int i = 1; i <= weekSpan; i++)
        {
            cells.Add(new DateCellModel
                {
                    Day = 0
                });
        }

        for (int i = 1; i <= maxDay; i++)
        {
            cells.Add(new DateCellModel
                {
                    Day = i,
                    Date = firstDayOfDate.AddDays(i - 1)
                });
        }

        var remain = 42 - cells.Count();

        if (remain > 0)
        {
            for (int i = 1; i <= remain; i++)
            {
                cells.Add(new DateCellModel
                    {
                        Day = 0
                    });
            }
        }
    }

    void SelectDate(DateTime date)
    {
        try
        {
            selectedDate = Date = date;
            openPicker = false;
            DateChanged.InvokeAsync(selectedDate);
            SetPersianFormatText(date);
            PrepareCells(selectedDate.Value);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            validationMessage = $"خطا در انتخاب تاریخ: {ex.Message}";
        }
    }

    void GoToToday()
    {
        try
        {
            var today = DateTime.Now;

            var year = pc.GetYear(today);
            var month = pc.GetMonth(today);
            var day = pc.GetDayOfMonth(today);

            selectedDate = Date = new DateTime(year, month, day, pc);

            DateChanged.InvokeAsync(selectedDate);

            PrepareCells(selectedDate.Value);
            SetPersianFormatText(selectedDate.Value);
            validationMessage = string.Empty;

            openPicker = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            validationMessage = $"خطا در تنظیم تاریخ امروز: {ex.Message}";
        }
    }


    // متد کمکی برای دریافت تعداد روزهای ماه
    int GetDaysInMonth(int year, int month)
    {
        return pc.GetDaysInMonth(year, month);
    }

    #region [ Month ]

    void NextMonth()
    {

        if (currentMonth < 12)
        {
            currentMonth++;
        }
        else
        {
            currentMonth = 1;
            currentYear++;
        }

        int lastDayOfMonth = GetDaysInMonth(currentYear, currentMonth);
        currentDay = currentDay > lastDayOfMonth ? lastDayOfMonth : currentDay;

        try
        {
            selectedDate = new DateTime(currentYear, currentMonth, currentDay, pc);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"خطا در تنظیم تاریخ: {ex.Message}");
            selectedDate = new DateTime(currentYear, currentMonth, 1, pc);
        }

        PrepareCells(selectedDate.Value);
    }

    void PrevMonth()
    {
        if (currentMonth > 1)
        {
            currentMonth--;
        }
        else
        {
            currentMonth = 12;
            currentYear--;
        }

        int lastDayOfMonth = GetDaysInMonth(currentYear, currentMonth);
        currentDay = currentDay > lastDayOfMonth ? lastDayOfMonth : currentDay;

        try
        {
            selectedDate = new DateTime(currentYear, currentMonth, currentDay, pc);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"خطا در تنظیم تاریخ: {ex.Message}");
            selectedDate = new DateTime(currentYear, currentMonth, 1, pc);
        }

        PrepareCells(selectedDate.Value);
    }

    void GoToMonth(int month)
    {
        currentMonth = month;
        selectedDate = new DateTime(currentYear, currentMonth, currentDay, pc);
        if (currentMonth == 12 && !pc.IsLeapYear(currentYear) && currentDay > 29)
            currentDay = 1;

        monthMode = yearMode = false;
        PrepareCells(selectedDate.Value);
    }

    void MonthMode()
    {
        monthMode = true;
        yearMode = false;
    }

    #endregion [ Month ]

    #region [ Year ]

    void NextYear()
    {
        currentYear++;

        int lastDayOfMonth = GetDaysInMonth(currentYear, currentMonth);
        currentDay = currentDay > lastDayOfMonth ? lastDayOfMonth : currentDay;

        try
        {
            selectedDate = new DateTime(currentYear, currentMonth, currentDay, pc);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"خطا در تنظیم تاریخ: {ex.Message}");
            selectedDate = new DateTime(currentYear, currentMonth, 1, pc);
        }

        PrepareCells(selectedDate.Value);
    }

    void PrevYear()
    {

        if (currentMonth == 1)
        {
            currentMonth = 12;
            currentYear--;
        }
        else
        {
            currentMonth--;
        }

        int lastDayOfMonth = GetDaysInMonth(currentYear, currentMonth);
        currentDay = currentDay > lastDayOfMonth ? lastDayOfMonth : currentDay;

        try
        {
            selectedDate = new DateTime(currentYear, currentMonth, currentDay, pc);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"خطا در تنظیم تاریخ: {ex.Message}");
            selectedDate = new DateTime(currentYear, currentMonth, 1, pc);
        }

        PrepareCells(selectedDate.Value);
    }

    void GoToYear(int year)
    {
        currentYear = year;
        selectedDate = new DateTime(currentYear, currentMonth, currentDay, pc);
        if (currentMonth == 12 && !pc.IsLeapYear(currentYear) && currentDay > 29)
            currentDay = 1;

        monthMode = yearMode = false;
        PrepareCells(selectedDate.Value);
    }

    void YearMode()
    {
        yearMode = true;
        monthMode = false;
    }

    #endregion [ Year ]

}
