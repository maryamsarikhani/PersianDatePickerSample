@using PersianDatePickerSample.Components.PersianDatePickerComponent
@inject IJSRuntime JS

<div class="Persian-date-picker" id="PersianPicker">
    <div class="input-wrapper">
        <input class="p-date"
               id="manualDateInput"
               value="@manualInput"
               @onfocus="() => manualInput = selectedDateInPersianFormat"
               @onclick="OpenPicker" />
        <a @onclick="Clear" class="clear">&#10006;</a>
    </div>

    @if (!string.IsNullOrEmpty(validationMessage))
    {
        <div style="color: red; font-size: 12px;">@validationMessage</div>
    }

    @if (openPicker)
    {
        <div class="Persian-date-wrapper">
            @if (monthMode)
            {
                <div class="month-select">
                    @foreach (var item in PersianDateHelper.GetMonths())
                    {
                        <a @onclick="() => GoToMonth(item.MonthNumber)">@item.MonthName</a>
                    }
                </div>
            }
            else if (yearMode)
            {
                <div class="year-select">
                    @for (int i = curYear; i >= 1380; i--)
                    {
                        var year = i;
                        <a @onclick="() => GoToYear(year)">@i</a>
                    }
                </div>
            }
            else
            {
                <div class="year">
                    <a @onclick="NextYear" class="navigation">&#8249;</a>
                    <span @onclick="YearMode">@currentYear</span>
                    <a @onclick="PrevYear" class="navigation">&#8250;</a>
                </div>

                <div class="month">
                    <a @onclick="NextMonth" class="navigation">&#8249;</a>
                    <span @onclick="MonthMode">@monthName</span>
                    <a @onclick="PrevMonth" class="navigation">&#8250;</a>
                </div>

                <div class="week">
                    @foreach (var name in PersianDateHelper.WeekNames)
                    {
                        <div class="day-name">
                            <span>@name</span>
                        </div>
                    }

                    @foreach (var item in cells)
                    {
                        var dayClass = item.Show ? "day" : "";

                        if (selectedDate.HasValue && item.Show && selectedDate.Value.Date == item.Date.Date)
                            dayClass += " current";

                        var today = new DateTime(pc.GetYear(DateTime.Now), pc.GetMonth(DateTime.Now), pc.GetDayOfMonth(DateTime.Now), pc);
                        if (item.Show && item.Date.Date == today.Date)
                            dayClass += " today";

                        <div class="@dayClass">
                            @if (item.Show)
                            {
                                <a @onclick="() => SelectDate(item.Date)">@item.Day</a>
                            }
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter] public DateTime? Value { get => Date; set { if (Date != value) { Date = value; DateChanged.InvokeAsync(value); } } }
    [Parameter] public EventCallback<DateTime?> ValueChanged { get; set; }
    [Parameter] public DateTime? Date { get; set; }
    [Parameter] public EventCallback<DateTime?> DateChanged { get; set; }

    DateTime? selectedDate;
    string selectedDateInPersianFormat = string.Empty;
    System.Globalization.PersianCalendar pc = new();
    string manualInput = string.Empty;
    string validationMessage = string.Empty;
    List<DateCellModel> cells = new();
    string monthName = string.Empty;
    int currentMonth, currentYear, currentDay, curYear;
    bool monthMode, yearMode, openPicker;
    DotNetObjectReference<PersianDatePicker>? objRef;

    protected override void OnInitialized()
    {
        curYear = pc.GetYear(DateTime.Now);
        if (Date.HasValue)
            SetPersianFormatText(Date.Value);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("addOutsideClickListener", "PersianPicker", objRef);
            await JS.InvokeVoidAsync("clearInputAndApplyMask", "manualDateInput", objRef);
        }
    }

    [JSInvokable]
    public void UpdateCalendar(int year, int month, int day)
    {
        try
        {
            // اعتبارسنجی سال
            if (year < 1380 || year > 1420)
            {
                validationMessage = "سال باید بین 1380 تا 1420 باشد.";
                return;
            }

            // اعتبارسنجی ماه
            if (month < 1 || month > 12)
            {
                validationMessage = "ماه باید بین 1 تا 12 باشد.";
                return;
            }

            // بررسی تعداد روزهای معتبر در ماه
            int maxDays = GetDaysInMonth(year, month);
            if (day < 1 || day > maxDays)
            {
                validationMessage = $"روز باید بین 1 تا {maxDays} باشد.";
                return;
            }

            // تنظیم تاریخ معتبر
            selectedDate = new DateTime(year, month, day, pc);

            // بروزرسانی تقویم
            Date = selectedDate;
            DateChanged.InvokeAsync(selectedDate);
            PrepareCells(selectedDate.Value);
            SetPersianFormatText(selectedDate.Value);

            // بازنشانی پیام خطا و بستن پیکر
            validationMessage = string.Empty;
            openPicker = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            validationMessage = $"خطا در تنظیم تاریخ: {ex.Message}";
        }
    }



    protected override void OnParametersSet()
    {
        if (Date != selectedDate)
        {
            selectedDate = Date;
            if (selectedDate.HasValue)
            {
                SetPersianFormatText(selectedDate.Value);
                PrepareCells(selectedDate.Value);
            }
        }
    }

    [JSInvokable]
    public void ClosePicker()
    {
        openPicker = false;
        StateHasChanged();
    }

    void Clear()
    {
        Date = selectedDate = null;
        selectedDateInPersianFormat = string.Empty;
        validationMessage = string.Empty;
        openPicker = false;
        DateChanged.InvokeAsync(null);

        // Invoke JS function to reset input field
        JS.InvokeVoidAsync("clearInputAndApplyMask", "manualDateInput");
    }

    public void Dispose()
    {
        if (objRef != null)
        {
            objRef.Dispose();
        }
    }


    // مدیریت ورودی دستی
    void HandleManualInput(ChangeEventArgs e)
    {

        var input = e.Value?.ToString()?.Trim();

        // اعتبارسنجی اولیه: خالی بودن ورودی
        if (string.IsNullOrEmpty(input))
        {
            validationMessage = "ورودی خالی است!";
            return;
        }

        // تقسیم تاریخ به بخش های مختلف
        var parts = input.Split('/');
        if (parts.Length != 3)
        {
            validationMessage = "فرمت ورودی معتبر نیست! فرمت صحیح: روز/ماه/سال.";
            return;
        }

        // مقداردهی متغیرهای روز، ماه و سال
        if (!int.TryParse(parts[0], out int year) ||
            !int.TryParse(parts[1], out int month) ||
            !int.TryParse(parts[2], out int day))
        {
            validationMessage = "مقادیر وارد شده باید عدد باشند.";
            return;
        }

        // ذخیره مقادیر پیش فرض در متغیرها
        currentDay = day;
        currentMonth = month;
        currentYear = year;

        // بررسی اعتبار مقادیر ماه
        if (currentMonth < 1 || currentMonth > 12)
        {
            validationMessage = "ماه وارد شده معتبر نیست (باید بین 1 تا 12 باشد).";
            return;
        }

        // بررسی اعتبار روز
        int maxDays = GetDaysInMonth(currentYear, currentMonth);
        if (currentDay < 1 || currentDay > maxDays)
        {
            validationMessage = $"روز وارد شده معتبر نیست (باید بین 1 تا {maxDays} باشد).";
            return;
        }

        try
        {
            // ساخت تاریخ انتخاب شده
            selectedDate = new DateTime(currentYear, currentMonth, currentDay, pc);

            // بروزرسانی تقویم
            PrepareCells(selectedDate.Value);
            validationMessage = string.Empty; // حذف پیام های خطا
            SetPersianFormatText(selectedDate.Value);
            Date = selectedDate;
            DateChanged.InvokeAsync(selectedDate);
        }
        catch (Exception ex)
        {
            validationMessage = $"خطا در تنظیم تاریخ: {ex.Message}";
        }
    }


    void OpenPicker()
    {
        if (openPicker)
        {
            openPicker = false;
            return;
        }

        selectedDate = Date ?? DateTime.Now;
        PrepareCells(selectedDate.Value);
        openPicker = true;
    }

    void SetPersianFormatText(DateTime date)
    {
        currentYear = pc.GetYear(date);
        currentMonth = pc.GetMonth(date);
        currentDay = pc.GetDayOfMonth(date);
        selectedDateInPersianFormat = $"{currentYear}/{currentMonth:D2}/{currentDay:D2}";
    }

    void PrepareCells(DateTime date)
    {
        cells.Clear();
        currentYear = pc.GetYear(date);
        currentMonth = pc.GetMonth(date);
        currentDay = pc.GetDayOfMonth(date);
        monthName = currentMonth.GetMonthName();

        var firstDayOfMonth = new DateTime(currentYear, currentMonth, 1, pc);
        int offset = firstDayOfMonth.DayOfWeek.GetWeekSpan();
        int daysInMonth = GetDaysInMonth(currentYear, currentMonth);

        for (int i = 0; i < offset; i++)
        {
            cells.Add(new DateCellModel { Day = 0 });
        }

        for (int i = 1; i <= daysInMonth; i++)
        {
            cells.Add(new DateCellModel
            {
                Day = i,
                Date = firstDayOfMonth.AddDays(i - 1),
                //Show = true
            });
        }

        while (cells.Count < 42)
        {
            cells.Add(new DateCellModel { Day = 0 });
        }
    }

    void SelectDate(DateTime date)
    {
        selectedDate = Date = date;
        openPicker = false;
        ValueChanged.InvokeAsync(selectedDate);
        SetPersianFormatText(date);
    }

    int GetDaysInMonth(int year, int month) => pc.GetDaysInMonth(year, month);

    void NextMonth()
    {
        if (currentMonth < 12) currentMonth++; else { currentMonth = 1; currentYear++; }
        AdjustDay();
    }

    void PrevMonth()
    {
        if (currentMonth > 1) currentMonth--; else { currentMonth = 12; currentYear--; }
        AdjustDay();
    }

    void AdjustDay()
    {
        int lastDay = GetDaysInMonth(currentYear, currentMonth);
        currentDay = currentDay > lastDay ? lastDay : currentDay;
        selectedDate = new DateTime(currentYear, currentMonth, currentDay, pc);
        PrepareCells(selectedDate.Value);
    }

    void MonthMode() => (monthMode, yearMode) = (true, false);

    void YearMode() => (yearMode, monthMode) = (true, false);

    void NextYear() { currentYear++; AdjustDay(); }

    void PrevYear() { currentYear--; AdjustDay(); }

    void GoToMonth(int month)
    {
        currentMonth = month;
        if (currentMonth == 12 && !pc.IsLeapYear(currentYear) && currentDay > 29) currentDay = 1;
        selectedDate = new DateTime(currentYear, currentMonth, currentDay, pc);
        monthMode = yearMode = false;
        PrepareCells(selectedDate.Value);
    }

    void GoToYear(int year)
    {
        currentYear = year;
        if (currentMonth == 12 && !pc.IsLeapYear(currentYear) && currentDay > 29) currentDay = 1;
        selectedDate = new DateTime(currentYear, currentMonth, currentDay, pc);
        monthMode = yearMode = false;
        PrepareCells(selectedDate.Value);
    }
}
